version: '3.9'
networks:
 api_postgres:


services:
 web:
  build:
   context: .
   dockerfile: shooting_range_front/Dockerfile
  ports:
   - "5000:5000"
  volumes:
   - ./shooting_range_front:/shooting_range_front
  environment:
   - FLASK_ENV=${FLASK_ENV}
   - CELERY_BROKER_URL=${CELERY_BROKER_URL}
   - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
  networks:
   - api_postgres
  depends_on:
   - redis


 web1:
  build:
   context: .
   dockerfile: shooting_range_api/Dockerfile
  ports:
   - "4000:4000"
  volumes:
   - ./shooting_range_api:/shooting_range_api
  environment:
   - FLASK_ENV=${FLASK_ENV}
   - CELERY_BROKER_URL=${CELERY_BROKER_URL}
   - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
  networks:
   - api_postgres
  depends_on:
   - redis
   - web
   - postgres

 celery_app:
  build:
   context: .
   dockerfile: celery_app/Dockerfile
  ports:
   - "3000:3000"
  volumes:
   - ./celery_app:/celery_app
  environment:
   - FLASK_ENV=${FLASK_ENV}
   - CELERY_BROKER_URL=${CELERY_BROKER_URL}
   - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
  networks:
   - api_postgres
  depends_on:
   - redis
   - web
   - web1


 celery-worker:
  build: ./celery_app
  command: python3 -m celery -A app.task.celery_app worker
  networks:
   - api_postgres
  environment:
   - CELERY_BROKER_URL=${CELERY_BROKER_URL}
   - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
  depends_on:
   - web
   - redis
   - web1


 redis:
  image: 'redis:4-alpine'
  networks:
   - api_postgres
  ports:
   - "6379:6379"


 postgres:
  image: postgres:14
  container_name: postgres
  environment:
   - POSTGRES_DB=${POSTGRES_DB}
   - POSTGRES_USER=${POSTGRES_DB}
   - POSTGRES_PASSWORD=${POSTGRES_DB}
  ports:
   - "5432:5432"
  volumes:
   - ./data/db:/var/lib/postgresql/data
  healthcheck:
   test: ['CMD-SHELL', 'pg_isready -U postgres']
   interval: 5s
   timeout: 30s
   retries: 6
  restart: always
  networks:
   - api_postgres

 auth-service:
  build:
   context: ./keycloak
   dockerfile: ./Dockerfile
  container_name: auth-service
  image: auth-service
  ports:
   - "8080:8080"
  volumes:
   - "./keycloak/config:/keycloak/config"
  environment:
   - DB_VENDOR=${DB_VENDOR}
   - KEYCLOAK_USER=${KEYCLOAK_USER}
   - KEYCLOAK_PASSWORD=${KEYCLOAK_PASSWORD}
   - KEYCLOAK_IMPORT=${KEYCLOAK_IMPORT}
  restart: unless-stopped
  networks:
   - api_postgres